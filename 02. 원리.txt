가. 구조
	1. 윈도우 프로그램은 크게 메인 부분과 메시지 처리 부분으로 나뉜다.
		가). 메인 부분
			1).모든 메시지를 전송하는 역할을 한다.
			2).신호를 하나씩 받아서 메시지를 처리하는 부분으로 보낸다.

		나). 메시지 처리 부분
			1).메시지를 받고, 메시지에 대해 약속된 반응을 나타낸다. 

나. 함수
	1. int WINAPI Winmain(HINSTANCE hInstance, HINSTACE hPrevInstanc, PSTR szCmdLine, int iCmdShow)
		가). 동작 방법
			1). 윈도우 클래스를 만든다.(윈도우의 속성을 저장하는 구조체)
			2). 구조체에 여러속성을 저장한 후 이를 등록한다.(하나 이상 등록이 가능하기 때문에 각 윈도우 클래스에 이름을 부여해야 한다.)
			3). 등록된 윈도우 클래스 중 하나를 사용할 윈도우 클래스로 지정한다.
			4). 우리가 만든 윈도우에서 다양한 메시지가 발생하고 이는 커널에 의해서 프로그램으로 전달되어 메시지 큐에 저장되어 관리된다.
			5). 마지막으로 큐에서 메시지를 하나씩 ㄲ낸다. 이렇게 꺼낸 메시지는 처리하기 위해 WndProc()함수에 가게 된다.
		나). 반환형, 인자 설명
			1). WINAPI : 윈도우 API 프로그램을 의미한다.
			2). hInstace : 운영체제가 프로그램에게 부여한 ID로 메모리에서의 위치이다.(두번째 인자는 지금은 사용하지 않는다.)
			3). szCmdLine : 명령라인에서 프로그램 구동 시 전달하는 문자열.(C에서의 argv와 비슷하며 프로그램이 실행될때 넘어온다.)
			4). imcdShow : 윈도우에 출력하는 형태

	2. RegisterClassEx
		가). 기능
			1). 이 함수를 이용해 커널에 프로그램을 등록한다.
			2). 이 때 함수의 파라미터 값으로 WINCLASSEX의 주소를 넘겨 줘야만 한다.

	3.HWND CreateWindow
		가). 기능
			1). 실질적으로 윈도우를 '만드는' 부분.
		나). 반환값, 파라미터 값 설명
			1). HWND = 윈도우 핸들 값 반환
			2). lpClassName = 윈도우 클래스 이름(구별을 위해 사용되는 이름)
			3). lpWindowName = 윈도우 타이틀 이름(실질적으로 타이틀 바에 출력되는 이름)
			4). dwStyle = 윈도우 스타일
			5). x = 윈도우 위치 x 좌표
			6). y = 윈도우 위치 y 좌표
			7). nWidth = 윈도우 가로 크기
			8). nHeight = 윈도우 세로 크기
			9). hWndParent = 부모 윈도우 핸들
			10). HMENU hMenu = 매뉴 핸들
			11). hInstance = 응용프로그램 인스턴스(주관적 생각 : 아마 커널이 프로그램 에게 준 번호..? 아닐까 싶습니다.)
			12). lpParam = 생성 윈도우 정보

	4. BOOL ShowWindow(HWND hWnd, int nCmdShow)
		가). 기능
			1). 파라미터 값을 이용해 위도우를 화면에 나타내거나, 사라지게 하거나, 최대화, 최소화 등을 한다.

	5. BOOL UpdateWindow(HWND hWnd)
		가). 기능
			1). 윈도우에 WM_PAINT를 보내어 화면에 윈도우를 기본적으로 출력 하도록 한다.

	6. BOOL GetMessage(LPMSG lpMsg, HWND hWnd, WINT wMsgFilterMin, UINT wMsgFilterMax)
		가). 기능
			1). 실질적으로 메시지를 꺼내는 함수.
		나). 인자 설명
			1). lpMsg : 메시지가 저장되어 있는 MSG구조체 포인터
			2). hWnd : 메시지가 발생한 윈도우의 핸들
			3). wMsgFilterMin : 얻어올 메시지의 범위에서 최소 정숫값
			4). wMsgFilterMax : 얻어올 메시지의 범위에서 최대 정숫값

	7. BOOL TranslateMessage(cons MSG *lpmsg)
		가). 기능
			1). 키를 변환해준다.
	
	8. LRESULT DispatchMessage(const MSG *lpmsg)
		가). 기능
			1). 메시지를 처리할 함수에게 메시지를 보내는 역할을 한다.

	9. LRESULT CWndProc(HWND hWnd, UINT iMsg,WPARAM wParam, LPARAM lParam)
		가). 기능
			1). 메시지를 미리 약속된 상숫값에 따라 switch-case 문으로 약속된 반응을 나타내어 메시지를 처리한다.
		
		나). 인자 설명 
			1). hWnd : 생성된 윈도우의 핸들 값이며 WinMain에서 CreateWindow를 이용해 생성한다.
			2). iMsg : 메시지 번호이며 처리할 메시지이다.
			3). wParam, lParam : 32비트 값이며 메시지에 따라 처리 방법이 다르다.
	
	10). DefWindowProc
		가). 기능
			1). 모든 메시지를 case문으로 처리하지는 않는다. 남는 것은 커널이 처리하는데 WndProc와 동일한 매개변수로 호출한다.

다. 클래스(구조체)
	1. WNDCLASSEX
		가). 구조체 멤버 설명
			1). cbSize = WNDCLASSEX구조체의 크기이다.
			2). style = 윈도우가 출력되는 형태이다.
			3). lpfnWndProc = 메시지 처리를 할 함수 이름을 기재한다.(WndProc)
			4). cbClsExtras = 클래스를 위한 여분의 메모리 크기.
			5). cbWndExtra = 윈도우를 위한 여분의 메모리 크기.
			6). hInstance = 커널에 program에 부여하는 ID
			7). hIcon = 기본 아이콘을 지정 할 때 사용
			8). hCursor = 기본 커서를 지정 할 떄 사용
			9). hbrBackground : 윈도우의 배경 색을 지정한다.
			10). lpszMenuName : 메뉴의 이름을 쓴다.
			11). lpszClassName : 윈도우 클래스의 이름을 문자열 타입으로 쓴다. 윈도우를 만들때 이 이름을 사용한다. (문자열 타입이기 때문에 유니코드, 멀티바이트 가리지 않고 처리하기 위해 가장 앞에 
				 _T를 붙여 주는 것이 좋다 이를 위해선 #include <TCHAR.H>을 해주자.)
			12). hIconSm : 작은 아이콘을 등록한다.

라. 메시지 처리 과정
	1. 키보드 마우스 등에 의해 이벤트가 발생함
	2. 이를 OS가 인식함
	3. 정숫값인 메시지를 보내 이벤트 발생을 알린다.
	4. 보내온 메시지가 메시지 큐에 차예오 쌓인다.
	5. GetMessage()이 메시지 큐에 저장된 메시지중 가장 앞에 대기중인 메시지를 꺼낸다.
	6. msg변수에 꺼낸 메시지를 저장하고 Translatemessage()함수로 변형한다.
	7. DispatchMessage()로 WndProc()함수가 메시지를 WndProc()보낸다.
	8. 메시지 처리함수인 WndProc()가 메시지를 받아 반응을 보인다.

마. 단어의 정의
	1.핸들
		가). 운영체제 발급해 주는 것을 받아서 쓴다.
		나). 대상(아마 프로세스)을 구분하기 위해서 정수형을 쓰며 중복되지 않는다.
		다). 파일, 브러쉬, 팬, 폰트 등은 모두 핸들로 관리된다.
	
	2. 인스턴스
		가). 객체지향적 관점에서 클래스가 메모리에 올라간 것.
		나). 아마 OS가 프로세스 관리를 위해 부여한 번호라고 추측한다.